'use strict';

var os = require('os');
var path = require('path');

var Directory = require('./directory');
var File = require('./file');
var FSError = require('./error');
var SymbolicLink = require('./symlink');


var isWindows = process.platform === 'win32';

function getPathParts(filepath) {
  var parts = path._makeLong(path.resolve(filepath)).split(path.sep);
  parts.shift();
  if (isWindows) {
    // parts currently looks like ['', '?', 'c:', ...]
    parts.shift();
    var q = parts.shift(); // should be '?'
    var base = '\\\\' + q + '\\' + parts.shift().toLowerCase();
    parts.unshift(base);
  }
  if (parts[parts.length - 1] === '') {
    parts.pop();
  }
  return parts;
}



/**
 * Create a new file system.
 * @constructor
 */
function FileSystem() {

  var root = new Directory();

  // populate with default directories
  var defaults = [os.tmpdir && os.tmpdir() || os.tmpDir(), process.cwd()];
  defaults.forEach(function(dir) {
    var parts = getPathParts(dir);
    var directory = root;
    var i, ii, name, candidate;
    for (i = 0, ii = parts.length; i < ii; ++i) {
      name = parts[i];
      candidate = directory.getItem(name);
      if (!candidate) {
        directory = directory.addItem(name, new Directory());
      } else if (candidate instanceof Directory) {
        directory = candidate;
      } else {
        throw new Error('Failed to create directory: ' + dir);
      }
    }
  });

  /**
   * Root directory.
   * @type {Directory}
   */
  this._root = root;

}


/**
 * Get a file system item.
 * @param {string} filepath Path to item.
 * @return {Item} The item (or null if not found).
 */
FileSystem.prototype.getItem = function(filepath) {
  var parts = getPathParts(filepath);
  var currentParts = getPathParts(process.cwd());
  var item = this._root;
  var name;
  for (var i = 0, ii = parts.length; i < ii; ++i) {
    name = parts[i];
    if (item instanceof Directory && name !== currentParts[i]) {
      // make sure traversal is allowed
      if (!item.canExecute()) {
        throw new FSEr